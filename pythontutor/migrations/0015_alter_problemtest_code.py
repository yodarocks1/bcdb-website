# Generated by Django 5.0 on 2024-06-23 00:11

import pythontutor.widgets
from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('pythontutor', '0014_problemtest_prerun_alter_problem_design_requirements_and_more'),
    ]

    operations = [
        migrations.AlterField(
            model_name='problemtest',
            name='code',
            field=pythontutor.widgets.CodeField(givens='\nclass TestFailure:\n    def __init__(self, which, description, context):\n        self.which = which # Which design requirement the learner failed to meet\n        self.description = description # How the learner failed to meet it\n        self.context = context # Some data or other information to provide context\n    def to_dict(self):\n        return {\n            "which": self.which,\n            "desc": self.description,\n            "context": self.context\n        }\n\nclass Result:\n    def __init__(self):\n        self.errors = []\n        self.decorations = []\n        self.markdownDisplay = ""\n    def add_error(self, test_failure):\n        self.errors.append(test_failure)\n    def add_decoration(self, file, selection, effect):\n        # For `effect`, see documentation at https://microsoft.github.io/monaco-editor/typedoc/interfaces/editor.IModelDecorationOptions.html\n        self.decorations.append((file, selection, effect))\n    def set_display(self, display):\n        self.markdownDisplay = display\n    def to_dict(self):\n        return {\n            "errors": list(map(TestFailure.to_dict, self.errors)),\n            "decorations": self.decorations,\n            "markdownDisplay": self.markdownDisplay\n        }\n\n# GIVENS:\n#         mode : Why the test is being run (One of ["save", "test", "hint", "submit"])\n#         main : \n#         code : \n#     language : \n#       active : (Optional)\n#    selection : (Optional)\n#  POST-RUN TESTS ONLY:\n#       module : The python module created by running the user\'s code\n#       output : The print output created by running the user\'s code\n\n# Most normal values and attributes starting with an underscore ("_") are off-limits, except for:\n#  ("__name__", "__import__")\n# If you want to use any others, use getattr(x, "_value")\n\nresult = Result()\n    ', languages=['python'], tab_name='__test__.py'),
        ),
    ]
